kind: Pipeline
apiVersion: tekton.dev/v1beta1
metadata:
  name: example-pipeline
spec:
  params:
    - name: revision
      type: string
    - name: git-url
      type: string
    - description: 'Snapshot of the application'
      name: SNAPSHOT
      default: '{"components": [{"name":"test-app", "containerImage": "quay.io/example/repo:latest"}]}'
      type: string
    - description: 'Namespace where the application is running'
      name: NAMESPACE
      default: "default"
      type: string
    - description: 'Expected output'
      name: EXPECTED_OUTPUT
      default: "Hello World!"
      type: string
  workspaces:
    - name: cluster-credentials
      optional: true
    - name: workspace
      volumeClaimTemplate:
        metadata:
          creationTimestamp: null
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
        status: {}
  tasks:
    - name: clone-repository
      params:
        - name: url
          value: $(params.git-url)
        - name: revision
          value: $(params.revision)
      workspaces:
          - name: output
            workspace: workspace
      taskRef:
        params:
          - name: name
            value: git-clone
          - name: bundle
            value: quay.io/redhat-appstudio-tekton-catalog/task-git-clone:0.1@sha256:d9e1ab10d72953e7a85dab69b8b96f5b41580a6d4026f77b6a5ba6f3ed227cc3
          - name: kind
            value: task
        resolver: bundles
    - name: task-1
      description: curl application endpoint, looking for certain text
      params:
        - name: SNAPSHOT
          value: $(params.SNAPSHOT)
        - name: NAMESPACE
          value: $(params.NAMESPACE)
        - name: EXPECTED_OUTPUT
          value: $(params.EXPECTED_OUTPUT)
      taskSpec:
        params:
          - name: SNAPSHOT
          - name: NAMESPACE
          - name: EXPECTED_OUTPUT
        results:
          - name: TEST_OUTPUT
            description: Test output
        steps:
          - image: golang:latest
            workspaces:
              - name: output
                workspace: workspace
            env:
              - name: SNAPSHOT
                value: $(params.SNAPSHOT)
              - name: NAMESPACE
                value: $(params.NAMESPACE)
              - name: EXPECTED_OUTPUT
                value: $(params.EXPECTED_OUTPUT)
            script: |
              ls $(workspaces.messages.path)